#!/bin/bash
#
# Custom bash(1) utility functions
#


# Get shorter name of specified path.
#   - $HOME is replaced with '~'
#   - if path is longer than $MAXPATH characters,
#     it is trimmed and prepended with '...'
function _shortpath
{
  MAXPATH=${MAXPATH:-30}
  DIR=`pwd | sed "s|^$HOME|~|"`

  if [ ${#DIR} -gt "$MAXPATH" ]; then
    let "MAXPATH -= 3"
    DIR="...${DIR: -$MAXPATH}"
  fi

  echo $DIR
}


# Callback function to set the command prompt PS1
function setPS1
{
  RET=$?
  if [[ $RET -eq 0 ]]; then
    STATUS_COLOR=${COLOR_PROMPT_OK}
    STATUS_REPORT="ʘ‿ʘ"
  else
    STATUS_COLOR=${COLOR_PROMPT_ERROR}
    STATUS_REPORT="ಠ_ಠ"
  fi

  PROMPT="${USER_COLOR}$(whoami)@${HOST}${COLOR_OFF}:${DIR_COLOR}\w${COLOR_OFF} \$(in_repo)${COLOR_SCM_BRANCH}\$(hg_branch)\$(git_branch)\$(p4_client_name)\$(cloud_client)${COLOR_OFF}${COLOR_SCM_STATE}\$(hg_status)${COLOR_OFF}\n[\! ${STATUS_COLOR}${STATUS_REPORT}${COLOR_OFF}] \$(prompt_char)${COLOR_OFF}"

  PS1="${PS1COLOR}${PROMPT}\[\033[0m\] "

  if [ `expr "$PS1" : '.*\(\\x\).*'` ]; then
    SHORTPATH=`_shortpath`
    PS1=${PS1/\\\\x/$SHORTPATH}
    PS1=${PS1/\\x/$SHORTPATH}
  fi

  # add information to titlebar if using xterm
  if [ -z "${PS1_NO_TITLEBAR}" ]; then
    case $TERM in
      xterm*|rxvt*|gnome*|screen*)
        local PS1_TITLEBAR="\[\e]0;${debian_chroot:+($debian_chroot)}$(whoami)@${HOST}:\w\a\]"
        ;;
      *)
        local PS1_TITLEBAR=''
        ;;
    esac
  fi

  export PS1="${PS1_TITLEBAR}${PS1}"
}


# Set the application home.  This sets the *_HOME environment variable, and adds
# the application's bin, sbin, and man directories to the appropriate paths
function setAppHome
{
  [ -n "$1" ] && [ -n "$2" ] && [ -d $2 ] && {
    export `echo $1 | tr a-z A-Z`_HOME="$2"
    addToPath "$2/bin"
    addToPath "$2/sbin"

    addToManPath "$2/man"
    addToManPath "$2/share/man"
  }
}


# Add the specified folder to the PATH environment variable, if it is not already present
function addToPath
{
  [ -d $1 ] && [ ! `echo $PATH | egrep "(^|:)$1(:|$)"` ] && PATH="$1:$PATH"
}

# Add the specified folder to the MANPATH environment variable, if it is not already present
function addToManPath
{
  [ -d $1 ] && [ ! `echo $MANPATH | egrep "(^|:)$1(:|$)"` ] && MANPATH="$1:$MANPATH"
}

# Add the specified folder to the LD_LIBRARY_PATH environment variable, if it is not already present
function addToLibPath
{
  [ -d $1 ] && [ ! `echo $LD_LIBRARY_PATH | egrep "(^|:)$1(:|$)"` ] && LD_LIBRARY_PATH="$1:$LD_LIBRARY_PATH"
}


# Add the specified folder to the specified PATH-like environment variable, if it is not already present
function addToPathVar
{
  eval local v=\$$1
  if [ -z "$v" ]; then
    [ -d $2 ] && eval $1=$2
  else
    [ -d $2 ] && [ ! `echo $v | egrep "(^|:)$2(:|$)"` ] && eval $1=$2:\$$1
  fi
}


function appendToAlias
{
  if [ ${#@} -ge 2 ]; then
    args=($@); unset args[0]
    ALIAS_CMD=`alias $1 2>/dev/null || echo "alias $1='$1'"`
    ALIAS_CMD="${ALIAS_CMD%\'} ${args[@]}'"
    eval "$ALIAS_CMD"
  fi
}

function sdr
{
  if [ -z "$@" ]; then
    screen -U -D -R
  else
    screen -U -D -R $@
  fi
}

# wrapper for screen that exports a few environment variables
function screen
{
  unset SCREEN_SESSION_NAME
  _HOST=$HOST

  args=("$@")
  for ((i=0; i<${#args[@]} ; i++)); do
    if [ ${args[i]} == "-S" ]; then
      export SCREEN_SESSION_NAME=${args[i+1]}
    fi
  done

  `which screen` "$@"
}

function toLower() {
  echo $1 | tr "[:upper:]" "[:lower:]"
}

function toUpper() {
  echo $1 | tr "[:lower:]" "[:upper:]"
}

#function getConnectingHost
#{
#  foo=`tty | sed "s/\/dev\///"` && who | grep -E "\W$foo\W" | sed -r "s/.*\((.*)\)/\1/"
#}


# from http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
function prompt_char() {
    #echo -ne "$COMMAND_STATUS_COLOR"
    [[ $PWD =~ $HOME/src/cloud/([^/]+) ]] && echo '☁' && return
    [[ $PWD =~ .*/src/cloud/[^/]+/([^/]+) ]] && echo '☁' && return
    git branch >/dev/null 2>/dev/null && echo '±' && return
    command -v hg >/dev/null 2>&1 && hg root >/dev/null 2>/dev/null && echo '☿' && return
    svn info >/dev/null 2>/dev/null && echo '∫' && return
    p4_client_name >/dev/null 2>/dev/null && echo '℗' && return
    echo '$'
}

# http://stevelosh.com/blog/2009/03/mercurial-bash-prompts/

in_repo() {
    [[ $PWD =~ $HOME/src/cloud/([^/]+) ]] && echo 'on ' && return
    [[ $PWD =~ .*/src/cloud/[^/]+/([^/]+) ]] && echo 'on ' && return
    command -v hg >/dev/null 2>&1 && [[ `hg branch 2> /dev/null` ]] && echo 'on ' && return
    [[ `git symbolic-ref HEAD 2> /dev/null` ]] && echo 'on ' && return
    [[ `p4_client_name 2> /dev/null` ]] && echo 'on ' && return
}

hg_branch() {
    command -v hg >/dev/null 2>&1 && hg branch 2> /dev/null
}

hg_status() {
    # T="$(date +%s%N)"; 
    command -v hg >/dev/null 2>&1 && hg status 2> /dev/null | awk '$1 == "?" { print "?"; print " " } $1 != "?" { print "!"; print " " }'  | sort | uniq | tr -d '\n'
    # T="$(($(date +%s%N)-T))"; M="$((T/1000000))"; echo "hg_status: ${M}"
}

function git_branch() {
      ref=$(git symbolic-ref HEAD 2> /dev/null) || return
      echo ${ref#refs/heads/}
}

g3_name() {
  pwd | sed -e 's/\(.*\/g.*3\).*/\1/'
}

#get the current p4 client name
p4_client_name() {
  if [ -e .p4config ]; then
    dir=`pwd`
  else
    dir=$(g3_name)/..
  fi
  local name=$(grep ^P4CLIENT "$dir/.p4config" 2>/dev/null | cut -d= -f2 | sed -e "s/^$USER-//" | tail -1)
  if [ "$name" == "" ]; then
    echo -n $2
    return 1
  fi

  echo "$name"
}

cloud_client() {
  [[ $PWD =~ $HOME/src/cloud/([^/]+) ]] && echo ${BASH_REMATCH[1]} && return
  [[ $PWD =~ .*/src/cloud/[^/]+/([^/]+) ]] && echo ${BASH_REMATCH[1]}
}


findowners() {
  lookin=`pwd`;
  while [ "$lookin" != "" ]; do
    ownersfile="$lookin/OWNERS"
    echo "- $ownersfile"
    cat $ownersfile 2>/dev/null && lookin="/"
    lookin=`echo "$lookin" | sed -r 's/(.*)\/.*/\1/'`
  done
}

tmuxs() {
  local session=${1:-default}
  tmux has-session -t $session && tmux attach-session -t $session || tmux new-session -s $session
}


# stolen from krs
settitle ()
{
  MESSAGE=$1

  case $TERM in
    xterm* | screen* | eterm-color* | gnome* )
      echo -e -n "\033]2;$USER@$HOST:$MESSAGE\007"
      PS1_NO_TITLEBAR=1
      ;;
    *)
      # do nothing
      ;;
  esac

   [ -z "$TMUX_PANE" ] || tmux rename-window "$MESSAGE"
}

# stolen from krs
unsettitle ()
{
  unset PS1_NO_TITLEBAR
  [ -z "$TMUX_PANE" ] || tmux set-window-option automatic-rename on
}
